#!/usr/bin/env node
'use strict';

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var run = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(token) {
    var _this = this;

    var domain, args, _ret;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            domain = new _domains3.default(apiUrl, token, { debug: debug });
            args = argv._.slice(1);
            return _context3.delegateYield(_regenerator2.default.mark(function _callee2() {
              var start_, domains, current, out, elapsed_, _target, err, _domains, _domain, _err, confirmation, _start, _elapsed, start, name, _ref3, uid, created, elapsed;

              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.t0 = subcommand;
                      _context2.next = _context2.t0 === 'ls' ? 3 : _context2.t0 === 'list' ? 3 : _context2.t0 === 'rm' ? 17 : _context2.t0 === 'remove' ? 17 : _context2.t0 === 'add' ? 50 : _context2.t0 === 'set' ? 50 : 63;
                      break;

                    case 3:
                      if (!(0 !== args.length)) {
                        _context2.next = 6;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments');
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 6:
                      start_ = new Date();
                      _context2.next = 9;
                      return domain.ls();

                    case 9:
                      domains = _context2.sent;

                      domains.sort(function (a, b) {
                        return new Date(b.created) - new Date(a.created);
                      });
                      current = new Date();
                      out = (0, _textTable2.default)(domains.map(function (domain) {
                        var url = _chalk2.default.underline('https://' + domain.name);
                        var time = _chalk2.default.gray((0, _ms2.default)(current - new Date(domain.created)) + ' ago');
                        return ['', domain.uid, url, time];
                      }), { align: ['l', 'r', 'l'], hsep: ' '.repeat(2) });
                      elapsed_ = (0, _ms2.default)(new Date() - start_);

                      console.log('> ' + domains.length + ' domain' + (domains.length > 1 ? 's' : '') + ' found ' + _chalk2.default.gray('[' + elapsed_ + ']'));
                      if (out) console.log('\n' + out + '\n');
                      return _context2.abrupt('break', 66);

                    case 17:
                      if (!(1 !== args.length)) {
                        _context2.next = 20;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments');
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 20:
                      _target = String(args[0]);

                      if (_target) {
                        _context2.next = 25;
                        break;
                      }

                      err = new Error('No domain specified');

                      err.userError = true;
                      throw err;

                    case 25:
                      _context2.next = 27;
                      return domain.ls();

                    case 27:
                      _domains = _context2.sent;
                      _domain = findDomain(_target, _domains);

                      if (_domain) {
                        _context2.next = 33;
                        break;
                      }

                      _err = new Error('Domain not found by "' + _target + '". Run ' + _chalk2.default.dim('`now domains ls`') + ' to see your domains.');

                      _err.userError = true;
                      throw _err;

                    case 33:
                      _context2.prev = 33;
                      _context2.next = 36;
                      return readConfirmation(domain, _domain, _domains);

                    case 36:
                      confirmation = _context2.sent.toLowerCase();

                      if ('y' !== confirmation && 'yes' !== confirmation) {
                        console.log('\n> Aborted');
                        process.exit(0);
                      }

                      _start = new Date();
                      _context2.next = 41;
                      return domain.rm(_domain.name);

                    case 41:
                      _elapsed = (0, _ms2.default)(new Date() - _start);

                      console.log(_chalk2.default.cyan('> Success!') + ' Domain ' + _chalk2.default.bold(_domain.uid) + ' removed [' + _elapsed + ']');
                      _context2.next = 49;
                      break;

                    case 45:
                      _context2.prev = 45;
                      _context2.t1 = _context2['catch'](33);

                      (0, _error.error)(_context2.t1);
                      exit(1);

                    case 49:
                      return _context2.abrupt('break', 66);

                    case 50:
                      if (!(1 !== args.length)) {
                        _context2.next = 53;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments');
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 53:
                      start = new Date();
                      name = String(args[0]);
                      _context2.next = 57;
                      return domain.add(name);

                    case 57:
                      _ref3 = _context2.sent;
                      uid = _ref3.uid;
                      created = _ref3.created;
                      elapsed = (0, _ms2.default)(new Date() - start);

                      if (created) {
                        console.log(_chalk2.default.cyan('> Success!') + ' Domain ' + _chalk2.default.bold(_chalk2.default.underline(name)) + ' ' + _chalk2.default.dim('(' + uid + ')') + ' added [' + elapsed + ']');
                      } else {
                        console.log(_chalk2.default.cyan('> Success!') + ' Domain ' + _chalk2.default.bold(_chalk2.default.underline(name)) + ' ' + _chalk2.default.dim('(' + uid + ')') + ' already exists [' + elapsed + ']');
                      }
                      return _context2.abrupt('break', 66);

                    case 63:
                      (0, _error.error)('Please specify a valid subcommand: ls | add | rm');
                      help();
                      exit(1);

                    case 66:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this, [[33, 45]]);
            })(), 't0', 3);

          case 3:
            _ret = _context3.t0;

            if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt('return', _ret.v);

          case 6:

            domain.close();

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function run(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var readConfirmation = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(domain, _domain, list) {
    var urls;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            urls = new _map2.default(list.map(function (l) {
              return [l.uid, l.url];
            }));
            return _context4.abrupt('return', new _promise2.default(function (resolve, reject) {
              var time = _chalk2.default.gray((0, _ms2.default)(new Date() - new Date(_domain.created)) + ' ago');
              var tbl = (0, _textTable2.default)([[_domain.uid, _chalk2.default.underline('https://' + _domain.name), time]], { align: ['l', 'r', 'l'], hsep: ' '.repeat(6) });

              process.stdout.write('> The following domain will be removed permanently\n');
              process.stdout.write('  ' + tbl + '\n');
              if (_domain.aliases.length) {
                process.stdout.write('> ' + _chalk2.default.yellow('Warning!') + ' This domain\'s ' + (_chalk2.default.bold(_domain.aliases.length + ' alias' + (_domain.aliases.length > 1 ? 'es' : '')) + ' ') + ('will be removed. Run ' + _chalk2.default.dim('`now alias ls`') + ' to list.\n'));
              }
              process.stdout.write('  ' + _chalk2.default.bold.red('> Are you sure?') + ' ' + _chalk2.default.gray('[yN] '));

              process.stdin.on('data', function (d) {
                process.stdin.pause();
                resolve(d.toString().trim());
              }).resume();
            }));

          case 2:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function readConfirmation(_x3, _x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _login = require('../lib/login');

var _login2 = _interopRequireDefault(_login);

var _cfg = require('../lib/cfg');

var cfg = _interopRequireWildcard(_cfg);

var _error = require('../lib/error');

var _toHost = require('../lib/to-host');

var _toHost2 = _interopRequireDefault(_toHost);

var _domains2 = require('../lib/domains');

var _domains3 = _interopRequireDefault(_domains2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  string: ['config', 'token'],
  boolean: ['help', 'debug'],
  alias: {
    help: 'h',
    config: 'c',
    debug: 'd',
    token: 't'
  }
});
var subcommand = argv._[0];

// options
var help = function help() {
  console.log('\n  ' + _chalk2.default.bold('𝚫 now domains') + ' <ls | add | rm> <domain>\n\n  ' + _chalk2.default.dim('Options:') + '\n\n    -h, --help              output usage information\n    -c ' + _chalk2.default.bold.underline('FILE') + ', --config=' + _chalk2.default.bold.underline('FILE') + '  config file\n    -d, --debug             debug mode [off]\n    -t ' + _chalk2.default.bold.underline('TOKEN') + ', --token=' + _chalk2.default.bold.underline('TOKEN') + ' login token\n\n  ' + _chalk2.default.dim('Examples:') + '\n\n  ' + _chalk2.default.gray('–') + ' Lists all your domains:\n\n      ' + _chalk2.default.cyan('$ now domains ls') + '\n\n  ' + _chalk2.default.gray('–') + ' Adds a domain name:\n\n      ' + _chalk2.default.cyan('$ now domains add ' + _chalk2.default.underline('my-app.com')) + '\n\n      Make sure the domain\'s DNS nameservers are at least 2 of these:\n\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('california.zeit.world') + '    ' + _chalk2.default.dim('173.255.215.107') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('london.zeit.world') + '        ' + _chalk2.default.dim('178.62.47.76') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('newark.zeit.world') + '        ' + _chalk2.default.dim('173.255.231.87') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('amsterdam.zeit.world') + '     ' + _chalk2.default.dim('188.226.197.55') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('dallas.zeit.world') + '        ' + _chalk2.default.dim('173.192.101.194') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('paris.zeit.world') + '         ' + _chalk2.default.dim('37.123.115.172') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('singapore.zeit.world') + '     ' + _chalk2.default.dim('119.81.97.170') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('sydney.zeit.world') + '        ' + _chalk2.default.dim('52.64.171.200') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('frankfurt.zeit.world') + '     ' + _chalk2.default.dim('91.109.245.139') + '\n      ' + _chalk2.default.gray('–') + ' ' + _chalk2.default.underline('iowa.zeit.world') + '          ' + _chalk2.default.dim('23.236.59.22') + '\n\n      ' + _chalk2.default.yellow('NOTE:') + ' running ' + _chalk2.default.dim('`now alias`') + ' will automatically register your domain\n      if it\'s configured with these nameservers (no need to ' + _chalk2.default.dim('`domain add`') + ').\n\n      For more details head to ' + _chalk2.default.underline('https://zeit.world') + '.\n\n  ' + _chalk2.default.gray('–') + ' Removing a domain:\n\n      ' + _chalk2.default.cyan('$ now domain rm my-app.com') + '\n\n      or\n\n      ' + _chalk2.default.cyan('$ now domain rm domainId') + '\n\n      To get the list of domain ids, use ' + _chalk2.default.dim('`now domains ls`') + '.\n');
};

// options
var debug = argv.debug;
var apiUrl = argv.url || 'https://api.zeit.co';
if (argv.config) cfg.setConfigFile(argv.config);

var exit = function exit(code) {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(function () {
    return process.exit(code || 0);
  }, 100);
};

if (argv.help || !subcommand) {
  help();
  exit(0);
} else {
  var config = cfg.read();

  _promise2.default.resolve(argv.token || config.token || (0, _login2.default)(apiUrl)).then(function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(token) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return run(token);

            case 3:
              _context.next = 9;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context['catch'](0);

              if (_context.t0.userError) {
                (0, _error.error)(_context.t0.message);
              } else {
                (0, _error.error)('Unknown error: ' + _context.t0.stack);
              }
              exit(1);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[0, 5]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()).catch(function (e) {
    (0, _error.error)('Authentication error – ' + e.message);
    exit(1);
  });
}

function indent(text, n) {
  return text.split('\n').map(function (l) {
    return ' '.repeat(n) + l;
  }).join('\n');
}

function findDomain(val, list) {
  return list.find(function (d) {
    if (d.uid === val) {
      if (debug) console.log('> [debug] matched domain ' + d.uid + ' by uid');
      return true;
    }

    // match prefix
    if (d.name === (0, _toHost2.default)(val)) {
      if (debug) console.log('> [debug] matched domain ' + d.uid + ' by name ' + d.name);
      return true;
    }

    return false;
  });
}